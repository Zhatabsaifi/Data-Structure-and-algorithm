Given an array arr[] of size N. For every element in the array, the task is to find the index of the farthest element in the array to the right which is 
smaller than the current element. If no such number exists then print -1. 

Input: arr[] = {3, 1, 5, 2, 4} 
Output: 3 -1 4 -1 -1 
arr[3] is the farthest smallest element to the right of arr[0]. 
arr[4] is the farthest smallest element to the right of arr[2]. 
And for the rest of the elements, there is no smaller element to their right.

Input: arr[] = {1, 2, 3, 4, 0} 
Output: 4 4 4 4 -1 


time - O(n log(n)  )
space - O(n) 

void farthest_min(int a[], int n)
{
    int suffix_min[n];
    suffix_min[n - 1] = a[n - 1];
    for (int i = n - 2; i >= 0; i--) {          // siffix minimum number
        suffix_min[i] = min(suffix_min[i + 1], a[i]);
    }
 
    for (int i = 0; i < n; i++) {
        int low = i + 1, high = n - 1, ans = -1;
 
        while (low <= high) {                   // use binary search to find the next farther smallest
            int mid = (low + high) / 2 ; 
            if (suffix_min[mid] < a[i]) {
                ans = mid;
                low = mid + 1;
            }
            else
                high = mid - 1;
        }
 
        // Print the required answer
        cout << ans << " ";
    }
}

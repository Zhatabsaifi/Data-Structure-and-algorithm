Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(1)


	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int max_row = -1 , max = -1;
	    int one = -1;
	    
	    for(int i=0;i<m;i++){                   // check in first row 
	        if(arr[0][i] == 1){
	            one = i;                             // index of 1 in row 0
	            max = (m - one );                    // count the number of 1 in row 1st
	            max_row = 0;                         //row index
	            break;
	        }
	    }
	    
	    if(one == -1){                      // if 1 is not present in first row 
	        one = m-1;
	    }
	    
	    for(int i=1;i<n;i++){                       // check in all row 
	       
	       while(one >= 0 && arr[i][one] == 1){                    // if the 1 index is previous in ith row
	            
	           if(max < (m-one )){                               //   find maximum                
	               max = m - one ;
	               max_row = i;
	           }
	           one -= 1;
	          
	       }
	   
	    }
	    return max_row;
	}

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]



class Solution {
public:
    vector<vector<int> > ans;
    
  
    void rec(vector<int> &nums, vector<vector<int> > &ans, vector<bool> &visit,vector<int> &cur){
        
        int n = nums.size();
        if(cur.size() == n){
            ans.push_back(cur);
            return;
        }
        
        for(int i=0;i<n;i++){
            if(i>0 && nums[i] == nums[i-1] && visit[i-1] == false){
              continue;    
            }
            
            if(visit[i] == false){
                visit[i] = true;
                cur.push_back(nums[i]);
                rec(nums,ans,visit,cur);
                visit[i]=false;
                cur.pop_back();
            }
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return  {};
         sort(nums.begin(),nums.end());
        vector<vector<int> > ans;
        vector<bool> visit(n,false);
        vector<int> cur;
        rec(nums,ans,visit,cur);
        return ans;
    }
};

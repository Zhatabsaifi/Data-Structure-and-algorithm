          8
        /   \    
      4      12
    /  \    /  \
   2    6  10   14

Key: 11  Floor: 10  Ceil: 12
Key: 1   Floor: -1  Ceil: 2
Key: 6   Floor: 6   Ceil: 6
Key: 15  Floor: 14  Ceil: -1



int Ceil(node* root, int input) 
{ 
    // Base case 
    if (root == NULL) 
        return -1; 
 
    // We found equal key 
    if (root->key == input) 
        return root->key; 
 
    // If root's key is smaller, ceil must be in right subtree 
    if (root->key < input) 
        return Ceil(root->right, input); 
 
    // Else, either left subtree or root has the ceil value 
    int ceil = Ceil(root->left, input); 
    return (ceil >= input) ? ceil : root->key; 
} 


int floor(node* root, int input) 
{ 
    // Base case 
    if (root == NULL) 
        return -1; 
 
    // We found equal key 
    if (root->key == input) 
        return root->key; 
 
    if (root->key > input) 
        return Ceil(root->left, input); 
 
    int fl = floor(root->right, input); 
    return (fl <= input) ? fl : root->key; 
} 





-------------------------------------------
iterative mehtod

void floorCeilBSTHelper(Node* root, int key, int& floor, int& ceil) 
{ 
 
    while (root) { 
 
        if (root->data == key) { 
            ceil = root->data; 
            floor = root->data; 
            return; 
        } 
 
        if (key > root->data) { 
            floor = root->data; 
            root = root->right; 
        } 
        else { 
            ceil = root->data; 
            root = root->left; 
        } 
    } 
    return; 
} 

void floorCeilBST(Node* root, int key) 
{ 
 
    // Variables 'floor' and 'ceil' are passed by reference 
    int floor = -1, ceil = -1; 
 
    floorCeilBSTHelper(root, key, floor, ceil); 
 
    cout << key << ' ' << floor << ' ' << ceil << '\n'; 
} 



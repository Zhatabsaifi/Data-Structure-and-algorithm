A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 
 
 
 time - O(logn) 
 
 class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n = arr.size();
        if(n==1) return 0;
       
        int low= 0, end = n-1;
        while(low < end){
            int mid = (low + end)/2;
            
            if(arr[mid] >arr[mid+1]) end = mid;
            else low = mid+1;
        }
        return low;
    }
};


---------------------------------------------------------

time - O(n)

class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n = arr.size();
        if(n==1) return 0;
        int in = 0;
        for(int i=0;i<n;i++){
            if(i==0){
                if(arr[i] >= arr[i+1]) in = i;
            }else if(i== n-1){
                if(arr[i] >= arr[i-1]) in = i;
            }else{
                if(arr[i-1] <= arr[i] && arr[i] >= arr[i+1])in = i;
            }
        }
        return in;
    }
};

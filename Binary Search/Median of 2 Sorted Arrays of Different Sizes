Given two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.

Example 1:
Input:
m = 3, n = 4
array1[] = {1,5,9}
array2[] = {2,3,6,7}
Output: 5
Explanation: The middle element for
{1,2,3,5,6,7,9} is 5


Example 2:
Input:
m = 2, n = 4
array1[] = {4,6}
array2[] = {1,2,3,5}
Output: 3.5

Expected Time Complexity: O(min(log n, log m)).
Expected Auxiliary Space: O(1).

1) method

Time Complexity: O(m + n). 
Space Complexity: O(1).

int getMedian(int ar1[], int ar2[], int n, int m) 
{ 
    int i = 0;                                                                    /* Current index of input array ar1[] */
    int j = 0;                                                                     /* Current index of input array ar2[] */
    int count; 
    int m1 = -1, m2 = -1; 
 
                                                                       // Since there are (n+m) elements, There are following two cases if n+m is odd then the middle index is median i.e. (m+n)/2 
    if((m + n) % 2 == 1) 
    { 
        for (count = 0; count <= (n + m)/2; count++)
        { 
            if(i != n && j != m)
            { 
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++]; 
            } 
            else if(i < n)
            { 
                m1 = ar1[i++]; 
            } 
            else                                                              // for case when j<m, 
            { 
                m1 = ar2[j++]; 
            } 
        } 
        return m1; 
    } 
     
                                                           // median will be average of elements at index ((m+n)/2 - 1) and (m+n)/2  in the array obtained after merging ar1 and ar2 
    else
    { 
        for (count = 0; count <= (n + m)/2; count++) 
        { 
            m2 = m1; 
            if(i != n && j != m)
            { 
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++]; 
            } 
            else if(i < n)
            { 
                m1 = ar1[i++]; 
            } 
            else                                                                 // for case when j<m, 
            { 
                m1 = ar2[j++]; 
            } 
        } 
        return (m1 + m2)/2; 
    } 
} 

2) method

Time Complexity : O(log(min(n, m)))

double findMedianSortedArrays(int *a, int n,  int *b, int m) 
{ 
      
    int min_index = 0, max_index = n, i, j, median; 
      
    while (min_index <= max_index) 
    { 
        i = (min_index + max_index) / 2; 
        j = ((n + m + 1) / 2) - i; 
          
                                                           // If j is negative then the partition is not  possible having i elements from array i 
        if (j < 0) 
        { 
            max_index = i-1; 
            continue; 
        } 
  
                                                           // if i = n, it means that Elements from a[] in the second half is an empty set. and if j = 0, 
                                                           // it means that Elements from b[] in the first  half is an empty set. so it is necessary to 
                                                           // check that, because we compare elements from  these two groups.  Searching on right 
        if (i < n && j > 0 && b[j - 1] > a[i]){         
            min_index = i + 1; 
         }
                  
                                                            // if i = 0, it means that Elements from a[] in  the first half is an empty set and if j = m, 
                                                           // it means that Elements from b[] in the second half is an empty set. so it is necessary to 
                                                           // check that, because we compare elements   from these two groups.  searching on left 
        else if (i > 0 && j < m && b[j] < a[i - 1])  {       
            max_index = i - 1; 
        }
  
                                                           // we have found the desired halves. 
        else
        { 
                                                               // this condition happens when we don't have any  elements in the first half from a[] so we 
                                                               // returning the last element in b[] from  the first half. 
            if (i == 0)  {          
                median = b[j - 1];  
            }
              
                                                                // and this condition happens when we don't have any elements in the first half from 
                                                                 // b[] so we returning the last element in  a[] from the first half. 
            else if (j == 0) {           
                median = a[i - 1];       
            }
            else {           
                median = maximum(a[i - 1], b[j - 1]);  
            }
            
            break; 
        } 
    } 
      
   
    if ((n + m) % 2 == 1){                                              // calculating the median. If number of elements is odd there is  one middle element. 
        return (double)median;
    }
      
    if (i == n){                                                       // Elements from a[] in the second half is an empty set.   
        return (median+b[j]) / 2.0; 
     }
    
    if (j == m){                                                     // Elements from b[] in the second half is an empty set. 
        return (median + a[i]) / 2.0; 
     }
      
    return (median + minimum(a[i], b[j])) / 2.0; 
} 

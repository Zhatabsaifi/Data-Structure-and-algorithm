Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

 

Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1



time - O(logn)

class Solution {
public:
    int peakIndexInMountainArray(vector<int>&arr) {
        int n = arr.size();
        
        int low = 0,hig = n-1;
        while(low < hig){
            int mid = (low + hig)/2;
            
            if(arr[mid-1] < arr[mid] && arr[mid]> arr[mid+1] ) return mid;
            else if(arr[mid-1] < arr[mid]){
                low = mid+1;
            }else hig = mid;
        }
        return low;
    }
};

You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one
quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W 
which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).

Example 1:

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3



int knapSack(int W, int wt[], int val[], int n) 
{ 
    if (n == 0 || W == 0) 
        return 0; 
 
    if (wt[n - 1] > W) {
        return knapSack(W, wt, val, n - 1); 
    }
    else {
        return max(  val[n - 1]  + knapSack(W - wt[n - 1], wt, val, n - 1),  knapSack(W, wt, val, n - 1)); 
     }
} 


-----------------------------------------------------------------------------------------------------------------


int knapSack(int W, int wt[], int val[], int n) 
{ 

  int arr[n+1][W+1] ;
    for(ll i=0;i<=n;i++){
          for(ll j=0;j<=W;j++){
              if(i==0|| j==0){
                arr[i][j]=0;
              }
              else{
                  if(we[i-1]<=j){
                      arr[i][j] = max(val[i-1]+arr[i-1][j-we[i-1]],arr[i-1][j]);
                  }else{
                    arr[i][j]=arr[i-1][j];
                  }
              }
          }
     }
     return arr[n][W];
} 





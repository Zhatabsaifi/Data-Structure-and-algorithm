There are N stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, 
the person can reach the top (order does matter).

Example 1:
Input:
N = 4
Output: 5
Explanation: You can reach 4th stair in
5 ways.

Example 2:
Input:
N = 10
Output: 89
Your Task:
Complete the function countWays() which takes the top stair number m as input parameters and returns the answer % 10^9+7.

Expected Time Complexity : O(N)
Expected Auxiliary Space: O(1)



formula : ways(n) = ways(n-1) + ways(n-2)

--------------------------------------------------------------------------------------------------
1st method

int fib(int n) 
{ 
    if (n <= 1) 
        return n; 
    return fib(n - 1) + fib(n - 2); 
}  
int countWays(int s) 
{ 
    return fib(s + 1); 
}

time - O(n)
space - O(n)  
after optime


--------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------
2nd method


#define MAX 100010

void solve(){
   ll n=100005;
   
   ll arr[]= {1,2};
   
   ll dp[n+1][3];
   memset(dp,0,sizeof(dp));
   
   for(ll i=0;i<=n;i++){                // first calculate for all
    for(ll j=0;j<3;j++){
      if(i==0){
        dp[i][j]=1;
      }
      else if(j==0){
        dp[i][j]=0;
      }
      else{
      
        if(arr[j-1] <=i){
             for(ll k=1;k<=2;k++){
                dp[i][j] += dp[i-arr[k-1]][j];
                dp[i][j] = (dp[i][j])%MOD;
            }
        }
        else{
          dp[i][j]=dp[i-1][j];
        }
      }
      
    }
   }
   
   
   ll t;
   cin>>t;
   while(t-- > 0){
      ll  a;
      cin>>a;
      cout<<dp[a][2]<<endl;
   }
}

--------------------------------------------------------------------------


3rd method

time - O(logn)
use matrix exponenstioal method


using namespace std;
#define ll long long
const int mod = 1e9 +7 ;

void multiply(int F[2][2], int M[2][2]) 
{ 
  ll x =  F[0][0]*1L*M[0][0] + F[0][1]*1L*M[1][0]; 
  ll y =  F[0][0]*1L*M[0][1] + F[0][1]*1L*M[1][1]; 
  ll z =  F[1][0]*1L*M[0][0] + F[1][1]*1L*M[1][0]; 
  ll w =  F[1][0]*1L*M[0][1] + F[1][1]*1L*M[1][1]; 
  
  F[0][0] = x%mod; 
  F[0][1] = y%mod; 
  F[1][0] = z%mod; 
  F[1][1] = w%mod; 
} 
void power(int F[2][2], int n){
     if( n == 0 || n == 1) 
      return; 
  int M[2][2] = { {1,1},
                  {1,0}
                }; 
  
  power(F, n/2); 
  multiply(F, F); 
  
  if (n%2 != 0) 
     multiply(F, M); 
}

void solve(){
    int n;
    cin>>n;
    int F[2][2] = {{1,1},
                    {1,0}
                   }; 

    if(n==0){
        cout<<0<<endl;
        return ;
    }
    power(F,n);
    cout<<F[0][0]<<endl;
}

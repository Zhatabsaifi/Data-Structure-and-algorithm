Given two strings S and T of length n and m respectively. find count of distinct occurrences of T in S as a sub-sequence. 
 

Example 1:

Input:
S = "banana" , T = "ban"
Output: 3
Explanation: There are 3 sub-sequences:
[ban], [ba n], [b an].




#define MOD 1000000007

int rec(vector<vector<int>>& dp ,string &st, string &t,int s1, int t1 ,int n,int m){
    if(t1 == m){
        return 1;
    }
    if(s1 == n) return 0;
    if(dp[s1][t1] != -1) return dp[s1][t1];
    
    int cnt=0;
    if(st[s1] == t[t1]){                                    // if match include or not 
        cnt = rec(dp,st ,t,s1+1,t1+1 , n ,m)%MOD;           // include t1 index
        cnt = (cnt +  rec(dp,st,t,s1+1,t1,n,m))%MOD;         // not include t1 index
    }else{
        cnt = rec(dp,st,t,s1+1,t1,n,m);
    }
    return dp[s1][t1] = cnt%MOD;
}
int subsequenceCount(string S, string T)
{
  //Your code here
  int n = S.length() ;
  int m = T.length();
  vector<vector<int> > dp(n,vector<int> (m,-1));
  return rec(dp , S,T,0,0,n,m);
}



------------------------------------------------------------------


class Solution {
public:
    
    int numDistinct(string s, string t) {
        int n = s.length() , m = t.length();
       
        long dp[n+1][m+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                if(j==0){
                    dp[i][j]=1;
                }else if(i==0){
                    dp[i][j]=0;
                }else{
                  if(s[i-1]==t[j-1])
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
                  else
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][m];
    }
};

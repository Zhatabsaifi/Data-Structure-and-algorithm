Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


time - O(n*m)
space - O(n*m)

class Solution {
public:
    int minDistance(string a1, string a2) {
         int n = a1.length() , m = a2.length();
        
        int dp[n+1][m+1];
        
         for(int i=0;i<=n;i++)
            dp[i][0] = i;
        for(int i=0;i<=m;i++)
            dp[0][i] = i;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                 if(a1[i-1]==a2[j-1]){
                    dp[i][j] = dp[i-1][j-1];
                }
                else{
                    dp[i][j] = min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]))+1;
                }            
            }
        }
       return dp[n][m];
    }
};







-------------------------

recursion approch

unordered_map<string,int>map;
    int minDistance(string word1, string word2) {
        
        if(map.find(word1+","+word2) != map.end()){         // memorization
            return map[word1+","+word2];
        }
        
        if(word1 == word2){                               // if both are same
            return 0;
        }
        
        if(word1.length() == 0 ){             // base case
            return word2.length();
        }
        if(word2.length() == 0 ){                 // base case
            return word1.length();
        }
        
        int i = 0;
        while((i< word1.length()) && (i< word2.length()) && (word1[i]==word2[i])){        // match string
            i++;
        }
        
        
        if(i == word1.length()){                          // base case
            return (word2.length()-i);
        }
        
        if(i == word2.length()){                // base case
            return (word1.length()-i);
        }
        
        int mini = INT_MAX;
        
        mini = minDistance(word1.substr(i),word2.substr(i+1)) + 1;        // delete i char in ward2
        
        mini = min(minDistance(word1.substr(i+1),word2.substr(i))+1,mini);      // delete i char in ward1
        
        mini = min(minDistance(word1.substr(i+1),word2.substr(i+1))+1,mini);      // delete i char in both means replace
        

        
        return map[word1+","+word2] = mini;
        
        
    }

Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)


O(n^2) time
O(n) space 


class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& arr) {
        
        int n= arr.size();
        if(n==0){
            return {};
        }
// Sort the array nums, purpose of sorting is to make sure that all divisors of an element appear before it.
        sort(arr.begin(),arr.end());   
      
// For each element in nums, find the length of largest subset and save in count[]        
        vector<int> cnt(n,1);
        
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(arr[i]%arr[j] == 0){
                    cnt[i] = max(cnt[i] , cnt[j]+1);
                }
            }
        }
        
//   Pick the index of the largest element in count.
        int ma = 0;
        for(int i=1;i<n;i++){
            if(cnt[i] > cnt[ma]) ma=i;
        }
        
// From nums[maxIndex] to 0, add every element belongs to the largest subset.
        vector<int> ans;
        int count = cnt[ma];     
        int val = arr[ma];
        
        for(int i=ma;i>=0;i--){
            if(val%arr[i] ==0 && count == cnt[i]){
                ans.push_back(arr[i]);
                count--;
                val = arr[i];
            }
        }
        return ans;
    }
};

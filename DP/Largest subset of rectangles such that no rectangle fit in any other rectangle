Given height and width of N rectangles. The task is to find the size of the largest subset such that no pair of rectangles fit within each other.
Note that if H1 ≤ H2 and W1 ≤ W2 then rectangle 1 fits inside rectangle 2.


Input: arr[] = {{1, 3}, {2, 2}, {1, 3}}
Output: 2
The required sub-set is {{1, 3}, {2, 2}}
{1, 3} is included only once as it can fit in {1, 3}

Input: arr[] = {{1, 5}, {2, 4}, {1, 1}, {3, 3}}
Output: 3

O(N*N) time complexity
O(n^2) space


#include <bits/stdc++.h> 
using namespace std; 
#define N 10 
int dp[N][N]; 

int findLongest(pair<int, int> a[], int n,  int present, int previous) 
{ 
                                                                // Base case when it exceeds 
    if (present == n) { 
        return 0; 
    } 
  
    else if (previous != -1  &&  dp[present][previous] != -1  ) {
            return dp[present][previous]; 
    } 

    int ans = 0; 
  
                                                                                                               // No elements in subset yet 
    if (previous == -1) { 
  
                                                                    // First state which includes current index 
        ans = 1 + findLongest(a, n,   present + 1, present);                        // assume present is first state   // +1 include itself
  
                                                                   // Second state which does not include current index 
        ans = max(ans, findLongest(a, n,  present + 1, previous)); 
    } 
    else { 
        int h1 = a[previous].first; 
        int h2 = a[present].first; 
        int w1 = a[previous].second; 
        int w2 = a[present].second; 

        if ((h1 <= h2 && w1 <= w2)) { 
            ans = max(ans, findLongest(a, n,  present + 1, previous)); 
        } 
        else { 
  
            ans = 1 + findLongest(a, n,  present + 1, present); 
  
            ans = max(ans, findLongest(a, n,   present + 1, previous)); 
        } 
    } 
  
    return dp[present][previous] = ans; 
} 
  

int getLongest(pair<int, int> a[], int n) 
{ 
    memset(dp, -1, sizeof dp); 
  
    sort(a, a + n); 
  
                                            // Get the answer 
    int ans = findLongest(a, n, 0, -1); 
    return ans; 
} 
  
// Driver code 
int main() 
{ 
  
    // (height, width) pairs 
    pair<int, int> a[] = { { 1, 5 }, 
                           { 2, 4 }, 
                           { 1, 1 }, 
                           { 3, 3 } }; 
    int n = sizeof(a) / sizeof(a[0]); 
  
    cout << getLongest(a, n); 
  
    return 0; 
} 

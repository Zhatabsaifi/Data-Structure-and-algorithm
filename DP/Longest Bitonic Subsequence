Given an array arr[0 â€¦ n-1] containing n positive integers, a subsequence of arr[] is called Bitonic if it is first increasing, then decreasing. Write a function
that takes an array as argument and returns the length of the longest bitonic subsequence.
A sequence, sorted in increasing order is considered Bitonic with the decreasing part as empty. Similarly, decreasing order sequence is considered Bitonic with 
the increasing part as empty.


Input arr[] = {1, 11, 2, 10, 4, 5, 2, 1};
Output: 6 (A Longest Bitonic Subsequence of length 6 is 1, 2, 10, 4, 2, 1)

Input arr[] = {12, 11, 40, 5, 3, 1}
Output: 5 (A Longest Bitonic Subsequence of length 5 is 12, 11, 5, 3, 1)

Input arr[] = {80, 60, 30, 40, 20, 10}
Output: 5 (A Longest Bitonic Subsequence of length 5 is 80, 60, 30, 20, 10)


time complexity - O(n^2)
space complexity - O(n)



int lbs( int arr[], int n ) 
{ 
   int i, j; 
   
   // calculate longest increseing subsequence
   int *lis = new int[n]; 
   for (i = 0; i < n; i++){
      lis[i] = 1; 
   }
  
   /* Compute LIS values from left to right */
   for (i = 1; i < n; i++) {
      for (j = 0; j < i; j++) {
         if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {
            lis[i] = lis[j] + 1; 
         }
      }
   }
  
  
  // calculate longest decresing subsequence
   int *lds = new int [n]; 
   for (i = 0; i < n; i++){
      lds[i] = 1;
   }
  
   /* Compute LDS values from right to left */
   for (i = n-2; i >= 0; i--){ 
      for (j = n-1; j > i; j--){ 
         if (arr[i] > arr[j] && lds[i] < lds[j] + 1){ 
            lds[i] = lds[j] + 1; 
         }
     }
  }
  
  
   /* Return the maximum value of lis[i] + lds[i] - 1*/
   int max = lis[0] + lds[0] - 1; 
   for (i = 1; i < n; i++) {
     if (lis[i] + lds[i] - 1 > max) {
         max = lis[i] + lds[i] - 1; 
      }
   }
   return max; 
} 

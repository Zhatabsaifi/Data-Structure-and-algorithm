Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.

Example 1:
Input:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
Explanation: LCS for input Sequences
“ABCDGH” and “AEDFHR” is “ADH” of
length 3.

time - O(n*n)
space - O(n*n)

#define ll long long
ll dp[105][105];

ll rec(string a,string b,ll s1,ll s2){
  if(s1==0 || s2==0){
    return dp[s1][s2]=0;
  }
  else if(dp[s1][s2] != -1) return dp[s1][s2];
  else{
    if(a[s1-1]==b[s2-1]){                                     // if both element are same
      return dp[s1][s2] = 1 + rec(a,b,s1-1,s2-1);
    }
    else{
      return dp[s1][s2] = max(rec(a,b,s1-1,s2) , rec(a,b,s1,s2-1));
    }
  }
}
void solve(){
   ll s1,s2;
   memset(dp,-1,sizeof(dp));
   cin>>s1>>s2;
   string a,b;
   cin>>a>>b;
   
   ll ans = rec(a,b,s1,s2);
  
   cout<<ans<<endl;
}

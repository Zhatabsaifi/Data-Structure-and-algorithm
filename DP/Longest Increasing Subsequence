Given an array of integers, find the length of the longest (strictly) increasing subsequence from the given array.

Example 1:
Input:
N = 16
A[]={0,8,4,12,2,10,6,14,1,9,5
     13,3,11,7,15}
Output: 6
Explanation:Longest increasing subsequence
0 2 6 9 13 15, which has length 6



1) method


TIme - O(n*n)
space - O(n)

 int longestIncer(int arr[],int n){
    int dp[n];
    memset( dp , 1 , sizeof(dp) ) ;
    
    for(int i=0 ;i <n;i++){
        for(int j=0 ; j<i ; j++ ){
        
            if(arr[i] > arr[j] ){
                dp[i] = max(dp[i] , dp[j] );
            }
            
        }
    }
    int ma=0;
    for(int i=0;i<n;i++){
        ma = max(ma, dp[i] );
    }
    return ma;
 } 
 
 
 
 2) method
 
 time - O(nlogn)
 space - O(n)
 
 int longestSubsequence(int n, int a[])
{
   int dp[n];
   
   int len = 0;
   for(int i=0;i<n;i++){
   
       int ind = lower_bound(dp,dp+len , a[i]) - dp;
       
       if(ind == len){                                  // all element is less than a[i] than inset this element to last index in dp
           dp[len] = a[i];
           len++;
       }
       else{
           dp[ind] = a[i];
       }
   }
   return len;
}

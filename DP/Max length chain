You are given N pairs of numbers. In every pair, the first number is always smaller than the second number. A pair (c, d) can follow another pair (a, b) if b < c. 
Chain of pairs can be formed in this fashion. You have to find the longest chain which can be formed from the given set of pairs. 
 

Example 1:

Input:
N = 5
P[] = {5  24 , 39 60 , 15 28 , 27 40 , 50 90}
Output: 3
Explanation: The given pairs are { {5, 24}, {39, 60},
{15, 28}, {27, 40}, {50, 90} },the longest chain that
can be formed is of length 3, and the chain is
{{5, 24}, {27, 40}, {50, 90}}




int maxChainLen(struct val p[],int n)
{
    pair<int,int> arr[n];
    for(int i=0;i<n;i++){
        arr[i].first = p[i].first;  
        arr[i].second = p[i].second;
    }
    int dp[n];
    for(int i=0;i<n;i++){                     // initiale the answer is 1
      dp[i]=1;
    }
    
    sort(arr,arr+n);                              // sort the array according to first 
    
    
  for(int i=1;i<n;i++){
  
    for(int j=0;j<i;j++){
    
      if( arr[j].second < arr[i].first  ){                     // main condition
        dp[i] = max(dp[i],dp[j]+1);
      }
      
    }
    
  }
  int ans=0;
  for(int i=0;i<n;i++) {                              // find maximum 
     ans = max(ans,dp[i]);
  }
  // cout<<endl;
  return ans;
}

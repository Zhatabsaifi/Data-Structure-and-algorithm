Problem Statement :-

Given an array of digits, you can write numbers using each digits[i] as many times as we want.  
For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.

Return the number of positive integers that can be generated that are less than or equal to a given integer n.

Input: digits = ["1","3","5","7"], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.

O(logN) time comlexity
O(logN) space complexity

class Solution {
public:
    int atMostNGivenDigitSet(vector<string>& digits, int num) {
       string st = to_string(num);
        int n = st.length();
        int si = digits.size();
		
        vector<int> dp(n+1,0);
        dp[n]=1; 						// base case
        for(int i=n-1;i>=0;i--){		// check every digit of number
            int ch = st[i]-'0';
            
            for(string s : digits){		// check every present digit 
			
                if(stoi(s) < ch){				// present digit less than number digit
                    dp[i] += pow(si , n-i-1); 
                }else if(stoi(s) == ch){			// present digit equal to number digit
                    dp[i] += dp[i+1];   
                }
                
            }
        }
		
        for(int i=1;i<n;i++){
            dp[0] += pow(si , i);
        }
        return dp[0];
    }
};

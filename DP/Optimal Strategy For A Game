You are given an array A of size N. The array contains integers and is of even length. The elements of the array represent N coin of values V1, V2, ....Vn. 
You play against an opponent in an alternating way.

In each turn, a player selects either the first or last coin from the row, removes it from the row permanently, and receives the value of the coin.

You need to determine the maximum possible amount of money you can win if you go first.

Example 1:
Input:
N = 4
A[] = {5,3,7,10}
Output: 15
Explanation: The user collects maximum
value as 15(10 + 5)

Example 2:
Input:
N = 4
A[] = {8,15,3,7}
Output: 22
Explanation: The user collects maximum
value as 22(7 + 15)

Expected Time Complexity : O(N*N)
Expected Auxiliary Space: O(N*N)



#define ll long long

ll rec(int arr[] ,int i,int j,vector<vector<int> >&dp){
    if(i==j) return arr[i];                                           // if only 1 element
    else if(i+1 == j) return max(arr[i] , arr[j]);                      // if only 2 element
    
    if(dp[i][j] != -1){                                             // use for memroization
        return dp[i][j];
    }
    
                                                                           // main logic
    int st = arr[i] + min( rec(arr, i+2,j,dp), rec(arr,i+1,j-1,dp) );               // take first  --> 2nd player take first (i+2,j)  or take last - (i+1, j-1)
    int end = arr[j] + min( rec(arr,i+1,j-1,dp) , rec(arr,i,j-2,dp) );                  // take last -- > end player take first - (i+1,j-1) or take last - (i,j-2)
    
    return dp[i][j] = max(st,end);
}
long long maximumAmount(int arr[], int n) 
{
   
    vector<vector<int> > dp(n,vector<int>(n, -1));              // use for memorization
    return rec(arr,0,n-1 , dp) ;
    
}

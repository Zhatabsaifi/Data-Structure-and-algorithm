Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

O(n*m) time
O(m) space

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        if(n==0) return 0;
        for(int i = n-2;i>=0;i--){                    // perform on 2nd last row
            int m = triangle[i].size();
            
            vector<int> dp(m,INT_MAX);
            
            for(int j=0;j<m;j++){                           // find the minimum one
                dp[j] = min(dp[j] , triangle[i][j] + min(triangle[i+1][j],triangle[i+1][j+1]));
            }
            for(int j=0;j<m;j++){
                triangle[i][j] = dp[j];
            }
        }
        return triangle[0][0];
    }
};

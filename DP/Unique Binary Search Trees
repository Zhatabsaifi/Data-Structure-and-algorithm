Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

formula :
            2*n Cn /(n+1);
            
            if n=3;
            
            then 6C3 / (3+1)
            => 6*5*4/(4*3*2) = 5




Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
   O(n^2)  time
   O(n) time
   
   
   class Solution {
public:
    int rec(vector<int> &dp ,int n){
        if(n==0 || n==1) return 1;
        if(dp[n] != -1) return dp[n];
        
        int cnt=0;
        for(int i=1;i<=n;i++){
            cnt = cnt + rec(dp,i-1) * rec(dp,n-i);
        }
        return dp[n] = cnt;
    }
    int numTrees(int n) {
        vector<int> dp(n+1,-1);
        
        int cnt= rec(dp,n);
        for(int x: dp) cout<<x<<" ";
        return cnt;
    }
};

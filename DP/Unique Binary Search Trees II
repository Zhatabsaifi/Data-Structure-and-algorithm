Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]


----------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> rec(int st,int end){
        vector<TreeNode*> ans;
        
        if(st > end){
            ans.push_back(NULL);  
            return ans;
        }
        
        for(int i=st ; i<= end;i++){
            vector<TreeNode*> left_tree = rec(st, i-1);
            vector<TreeNode*> right_tree = rec(i+1,end);
            
            for(TreeNode* left : left_tree){
                for(TreeNode* right : right_tree){
                    TreeNode* node = new TreeNode(i);
                    node->left = left;
                    node->right = right;    
                    
                    ans.push_back(node);
                }
            }
        }
        return ans;
    }
    vector<TreeNode*> generateTrees(int n) {
        if(n==0) return {};
        return rec(1,n);
    }
};

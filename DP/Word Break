Given a string A and a dictionary of n words B, find out if A can be segmented into a space-separated sequence of dictionary words. 

Example 1:
Input:
n = 12
B = { "i", "like", "sam", "sung", "samsung", "mobile",
"ice","cream", "icecream", "man", "go", "mango" }
A = "ilike"
Output: 1
Explanation:The string can be segmented as "i like".

Your Task:
Complete wordBreak() function which takes a string and list of strings as a parameter and returns 1 if it is possible to break words, else return 0. 
You don't need to read any input or print any output, it is done by driver code.

Expected time complexity: O(s2)
â€‹Expected auxiliary space: O(s) , where s = length of string A

Constraints:
1 <= N <= 12
1 <= s <=1000 , where s = length of string A
 The length of each word is less than 15.
 
 
 class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.length();
        map<string,int> mp;
        
        for(string x: wordDict){        // store in Map 
             mp[x]++;
        }
        
        bool arr[n];
        memset(arr,false,sizeof(arr));
        
        for(int i=0;i<n;i++){

            if(mp.find(s.substr(0,i+1)) != mp.end()){          // if string is availible in dict                             //  cout<<s.substr(0,i+1)<<" "<<i<<endl;
                arr[i]=true;
            }else{
            
                for(int j=0;j<i;j++){                                         // check string is possible or not 
                    if(arr[j]==true){
                        if(mp.find(s.substr(j+1,i-j)) != mp.end()){                   //     cout<<s.substr(j+1,i-j)<<"-->"<<i<<endl;
                            arr[i]=true; 
                            break;
                        }
                    }
                }
                
            }
        }
        
        return arr[n-1];
    }
};

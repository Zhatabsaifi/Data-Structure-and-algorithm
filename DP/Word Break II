Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a 
valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

Example 1:
Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]


class Solution {
public:
   bool dp[100000];
    vector<string> ans;
    unordered_set<string> mp;
    
    void dfs(int node,string s,string st){
          int n = s.length();
          
         if(node== n){
         
             if(st.size() >= n){
                 st.pop_back();
                 ans.push_back(st);
             }
             
             return ;
         }   
         
        if(dp[node] == false){
            return ;
        }
        
        int before = ans.size();
        
        for(int i=node;i<n;i++){
        
            string wo = s.substr(node,i-node+1);
            
            if( mp.find(wo) != mp.end()){
                string change = st;
                change += wo;
                change += " ";
                dfs(i+1,s,change);
            }
        }
        
        int after = ans.size();
        if( before == after ) dp[node]=false;
    }
    
    vector<string> wordBreak(string s, vector<string>& wordDict) {
       int n = s.size();
        
        for(string x: wordDict){                                    // insert in map or set for searching 
             mp.insert(x);
        }
        
        memset(dp,true,sizeof(dp));                                  // for memorization
        
        dfs(0,s,"");
        
        return ans;
    }
};


----------------------------------------------------------------------------------------------

class Solution {
public:
    vector<string> helper(string s, vector<string>& wordDict, unordered_map<string, vector<string> >& um){
    
        if(um.find(s) != um.end()) {
             return um[s];
        }
        
        vector<string> res;
        
        if(s.empty()){
            return res;
        }
        
        for(string word : wordDict){
        
            if(!(s.substr(0, word.size()) == word)){
                    continue;
            }
            
            if(s.size() == word.size()){
                res.push_back(word);
            }
            else{
                vector<string> temp = helper(s.substr(word.size()), wordDict, um);
                
                for(string item : temp){
                    item = word + ' ' + item;
                    res.push_back(item);
                }
            }
        }
        
        um[s] = res;
        return res;
    }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string, vector<string> > um;
        return helper(s, wordDict, um);
    }
};

Find nCr for given n and r.

Example 1:
Input:
n = 3, r = 2
Output: 3

Example 2:
Input:
n = 4, r = 2
Output: 6


Expected Time Complexity : O(N*R)
Expected Auxiliary Space: O(N)


formula -- nCr ==    (n!) /( (r!)*(n-r)! )  


#include<bits/stdc++.h> 
using namespace std; 
const int p = 1e9+7;

int main() 
{ 
  int t, n, r;
  cin >> t;
  
  while(t--){
      cin >> n >> r;
      cout << nCrModp(n, r) << endl;
  }
  
  return 0; 
}

unsigned long long power(unsigned long long x,  int y, int p) 
{ 
    unsigned long long res = 1; 
    x = x % p;
    while (y > 0) { 
        if (y & 1) 
            res = (res * x) % p; 
        y = y >> 1;
        x = (x * x) % p; 
    } 
    return res; 
} 

unsigned long long modInverse(unsigned long long n, int p) 
{ 
    return power(n, p - 2, p); 
}

int nCrModp(int n, int r) 
{ 
    if(r > n) return 0;
    
    int p = 1e9 + 7;
    unsigned long long fac[n + 1]; 
    
    fac[0] = 1;
    
    for (int i = 1; i <= n; i++){ 
        fac[i] = (fac[i - 1] * i) % p;
    }
  
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; 
} 

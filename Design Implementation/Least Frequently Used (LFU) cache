Design and implement a data structure for Least Frequently Used (LFU) cache.

Implement the LFUCache class:

LFUCache(int capacity) Initializes the object with the capacity of the data structure.
int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
void put(int key, int value) Sets or inserts the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently
used item before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be evicted.

Notice that the number of times an item is used is the number of calls to the get and put functions for that item since it was inserted. This number is set to zero when the 
item is removed.

Example 1:

Input
["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]

Explanation
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);
lfu.put(2, 2);
lfu.get(1);      // return 1
lfu.put(3, 3);   // evicts key 2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
lfu.put(4, 4);   // evicts key 1.
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
lfu.get(4);      // return 4





#define pp  pair<int,int> 

class LFUCache {
public:
    unordered_map<int , list<int> > freq_to_key;                                          // store the list of frequency
    unordered_map<int , pp > key_info;                                                  //(key to {value,freq});
    unordered_map<int , list<int> ::iterator > address ;                                    // store the address of every key i.e store on which location 
    
    int capacity , size;
    int mini_freq;
        
        
    LFUCache(int cap) {
        capacity = cap;
        size = 0;
        mini_freq = 0;
    }
    
    void update(int key){                                           // use to change the frequency and in list
        int cur_freq = key_info[key].second;
        
        key_info[key].second++ ;                                  // increase the freq
        
        list<int> ::iterator it = address[key];                                     // find key address
        
        freq_to_key[cur_freq].erase(it);                                            // erase the previous
        
        cur_freq ++ ; 
        
        freq_to_key[cur_freq].push_back(key);                                           // insert in new list
        
        address[key] = -- freq_to_key[cur_freq].end();                                  // last element of list
        
        if(freq_to_key[mini_freq].empty() ){                                        // change mini_freq when the previous list is empty
            mini_freq++;
        }
    }
    
    int get(int key) {
        auto it = key_info.find(key);
        
        if(it != key_info.end()){
           update(key);                                            // update the frequency
            return key_info[key].first ;
            
        }
        else return -1;
    }
    
    void put(int key, int value) {
          if(capacity<=0){                                    // base case
            return;
          }
        
        auto it = key_info.find(key);
        
        if(it != key_info.end()){                                   // already present
            key_info[key].first = value;                                  // change the value
            
            update(key);                                        // change the frequency
            
        }else{
            if(size == capacity){                                       // when list is full
                int remove_key = freq_to_key[mini_freq].front();
                
                freq_to_key[mini_freq].pop_front();
                key_info.erase(remove_key);                                         // remove storage
                address.erase(remove_key);                                          // remove address of key 
                
            }else{                                             // when list is not full
                size++;
            }
            
            key_info[key] = {value , 1};   /                                / insert in freq 1
            mini_freq = 1;                                    // because of new freq 1 key insert
            
            freq_to_key[1].push_back(key);                                        // insert in freq list
            address[key] = -- freq_to_key[1].end();                                  // last element is the address of key storage
            
        }
    }
};

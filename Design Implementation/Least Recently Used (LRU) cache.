Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity 
from this operation, evict the least recently used key.

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4



------------------------------------------------------------
time complexity 
    for get function   -- O(n)
    for put fuction -- O(n) 

class LRUCache {
public:
    map<int,int> mp;
    list<int> q;
    int cap=0,cnt=0;
    
    LRUCache(int capacity) {      // constructer
        cap = capacity;
    }
    
    int get(int key) {
        auto it = mp.find(key);
        if(it != mp.end()){
            q.remove(key);          // this line take O(n) worst case time complexity
            q.push_front(key);      // this line take O(1) time 
            return it->second;
        }else {
            return -1;
        }
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){     // when key is already present
            mp.erase(key);
            q.remove(key);         // this line take O(n) worst case time complexity
            q.push_front(key);      // this line take O(1) time 
            mp[key] = value;
            
        }else{                        // when key is not present  
        
            if(cnt < cap){        // list is not full           
                cnt++;   
                q.push_front(key);  
                mp[key] = value;
                
            }else{                // when list is full 
                mp.erase(q.back());
                q.pop_back();
                q.push_front(key); 
                mp[key] = value;
            }
        }
    }
};


------------------------------------------------------------------------

time complexity 
    for get function   -- O(1)
    for put fuction -- O(1) 


struct Node{
    int key = 0,val=0;
    Node* next = NULL;
    Node* prev = NULL;
};

class LRUCache {
public:
    unordered_map<int, pair<int, Node*> > mp;
                            // pair<value of key , node address of key> 
    
    int cap =0 , size=0;
    Node *head = new Node() , *last = new Node();
    
    LRUCache(int capacity) {
        cap = capacity;
        head ->next = last;
        last ->prev = head;
    }
    
      void del(Node* delnode) {           // delete element in O(1)
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }
    
    void insert(Node* newnode) {        // insert element in O(1)
        Node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }
    
    int get(int key){
         int res = -1;
        if (mp.find(key) != mp.end()) {
            Node* resnode = mp[key].second;
            res = resnode->val;
            del(resnode);           // delelte in O(1)
            mp.erase(key);        
            insert(resnode);        // insert in O(1)
            mp[key] = {res , head->next } ;
        }
        return res;
    }
    
    void put(int key, int value) {
        auto it =  mp.find(key);
        
        if(it != mp.end()){         // when already present in list
        
           Node* existingnode = mp[key].second;
            
            if (existingnode->val != value) {
                existingnode->val = value;
            }
            
            del(existingnode);          // take O(1)
            insert(existingnode);       // take O(1)
            mp.erase(key);
            mp[key] ={value, head->next };
            
        }else{            // when key isn't present 
        
           if(size < cap){      // when list isn't full fill
               size++;
                Node* newnode = new Node();
                newnode->key = key;
                newnode->val = value;
                insert(newnode);
                mp[key] = {value , newnode };
              
           }else{                               // when list is full
               Node* delnode = last->prev;
                int delkey = delnode->key;
                del(delnode);
                Node* newnode = new Node();
                newnode->key = key;
                newnode->val = value;
                insert(newnode);
                mp.erase(delkey);
                mp[key] = {value , newnode } ;
           }
        }
    }
};

Given an array of strings, find if the given strings can be chained to form a circle. A string X can be put before another string Y in circle if the 
last character of X is same as first character of Y.

Input: arr[] = {"geek", "king"}
Output: Yes, the given strings can be chained.
Note that the last character of first string is same
as first character of second string and vice versa is
also true.

Input: arr[] = {"for", "geek", "rig", "kaf"}
Output: Yes, the given strings can be chained.
The strings can be chained as "for", "rig", "geek" 
and "kaf"

Input: arr[] = {"aaa"};
Output: Yes

Input : arr[] = [“ijk”, “kji”, “abc”, “cba”]
Output : No

 Kosaraju’s DFS based simple algorithm   application
 
 
 
 
 #include<bits/stdc++.h>
using namespace std;

#define MAX  26
#define pb(a)   push_back(a)

vector<int> edge[MAX];
vector<int> in(MAX,0),out(MAX ,0);

void dfs(int node,vector<bool> &visit){
    visit[node] = true;
    
    for(int x : edge[node]){
        if(visit[x] == false){
            dfs(x,visit);
        }
    }
}
void getTranspose(){
    vector<int> change[MAX];
    for(int i=0;i<MAX;i++){
        for(int x : edge[i]){
            change[x].pb(i);
        }
    }
    for(int i=0;i<MAX;i++){
        edge[i].clear();
        for(int x: change[i]){
            edge[i].pb(x);
        }
    }
}
void clear(){
    for(int i=0;i<MAX;i++){
        edge[i].clear();
        in[i]=0;
        out[i]=0;
    }
}
bool solve(){
    clear();
    int n;
    cin>>n;
    vector<string> vec(n);
    for(int i=0;i<n;i++){
        cin>>vec[i];
    }
    for(string st : vec){
        int f = st.front()-'a';
        int l = st.back()-'a';
        in[l]++;  // last element of string
        edge[f].pb(l);
    }
    vector<bool> visit(MAX,false);
    
    //   check it is strongly connected or not
    int node=0;
    
    for(n=0;n<MAX;n++){
        if(edge[n].size() >0) break;
    }
    dfs(node,visit);   
    
    getTranspose();  // change the connection
    
    for(int i=0;i<MAX;i++){
        visit[i] = false;
    }
    dfs(node,visit);
    for(int i=0;i<MAX;i++){
        if(edge[i].size() > 0 && visit[i] == false){
            return false;
        }
    }
    
    // 2nd condition
    // inorder or out degree are same
    for(int i=0;i<MAX;i++){
        if(in[i] != edge[i].size()) return false;
    }
    return true;
}

int main(){
    int t;
    cin>>t;
    while(t--){
        cout<<solve()<<endl;
    }
}

Node *merge(Node *first, Node *second)     // double linked list merge 
{  
    // If first linked list is empty  
    if (!first)  
        return second;  
  
    // If second linked list is empty  
    if (!second)  
        return first;  
  
    // Pick the smaller value  
    if (first->data < second->data)  
    {  
        first->next = merge(first->next,second);  
        first->next->prev = first;  
        first->prev = NULL;  
        return first;  
    }  
    else
    {  
        second->next = merge(first,second->next);  
        second->next->prev = second;  
        second->prev = NULL;  
        return second;  
    }  
}  


Node *split(Node *head)    // split node in two part
{  
    Node *fast = head,*slow = head;  
    while (fast->next && fast->next->next)  
    {  
        fast = fast->next->next;  
        slow = slow->next;  
    }  
    Node *temp = slow->next;  
    slow->next = NULL;  
    return temp;  
}

Node *mergeSort(Node *head)  
{  
    if (!head || !head->next)    // zero or one element present in list
        return head;  
        
    Node *second = split(head);    // divide in two part // divide and conqure
  
    // Recur for left and right halves  
    
    head = mergeSort(head);         // perform
    second = mergeSort(second);  // perform
  
    // Merge the two sorted halves  
    return merge(head,second);     // merege two sorted list
}  

Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode *current = head , *prevv = NULL , *temp = NULL;
        
        while(current){
            temp = current->next;
            current->next = prevv;
            prevv = current;
            current = temp;
        }
        return prevv;

    }

    bool isPalindrome(ListNode* head) {
        if(head==NULL){
            return true;
        }
        ListNode *fast = head , *slow = head , *prev = head;
        
        while(fast && fast->next){
            prev = slow;
            slow = slow -> next;
            fast = fast->next->next;
        }
        
        prev->next = NULL; // first part 
        ListNode* revhead = reverse(slow);  // reverse the second part
        
        while(head && revhead){
            if(head->val==revhead->val){
                head = head->next;
                revhead = revhead->next;
            }
            else{
                return false;
            }
        }
         return true;
    }
};

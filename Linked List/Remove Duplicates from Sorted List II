Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.

Example 1:
Input: 1->2->3->3->4->4->5
Output: 1->2->5

O(n) time
O(1) space


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head== NULL || head->next == NULL) return head;               // base condition 
        
       ListNode *dum = new ListNode(0);                               // use next pointer technique
        dum ->next = head;
        ListNode* prev = dum;             
        ListNode* cur = head;
        
        while(cur != NULL){
            while(cur->next != NULL  && prev->next->val == cur->next->val){       // move next when any duplicate come
                cur = cur->next;
            }
            
            if(prev->next == cur){                             // only single element present
                prev = prev->next;
            }else{                                              // duplicate between prev and Cur node
                prev->next = cur->next;
            }
            cur=cur->next;
        }
        return dum->next;
        
    }
};

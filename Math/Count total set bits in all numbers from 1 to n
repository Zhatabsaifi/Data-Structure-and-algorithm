Given a positive integer N, the task is to count the sum of the number of set bits in the binary representation of all the numbers from 1 to N.

1 ) 16 -> 33

O(n) time complexity
O(n) space complexity 

int countSetBits(int n) 
{ 
    int cnt = 0; 
    vector<int> setBits(n + 1); 
    setBits[0] = 0; 
    setBits[1] = 1; 
  
    // For the rest of the elements 
    for (int i = 2; i <= n; i++) { 
        if (i % 2 == 0) { 
            setBits[i] = setBits[i / 2]; 
        } 
        else { 
            setBits[i] = setBits[i - 1] + 1; 
        } 
    } 
  
    // Sum all the set bits 
    for (int i = 0; i <= n; i++) { 
        cnt = cnt + setBits[i]; 
    } 
  
    return cnt; 
} 
  






--------------------------------
O(log(n) ) time complexity
O(1) space


int countSetBits(int n) 
{ 
    n++; 
    int powerOf2 = 2; 
    int cnt = n / 2; 
  
    // Loop for every bit required to represent n 
    while (powerOf2 <= n) { 
        int totalPairs = n / powerOf2; 
        cnt += (totalPairs / 2) * powerOf2; 
        cnt += (totalPairs & 1) ? (n % powerOf2) : 0; 
  
        // Next power of 2 
        powerOf2 <<= 1; 
    } 
  
    return cnt; 
} 


-------------------------------------------------------------------------

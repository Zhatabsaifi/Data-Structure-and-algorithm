Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example 1:

Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].

Example 2:

Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].

O(nlogn) time 
O(n) space 
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        sort(nums.begin(),nums.end());      // sort the array    take O(nlogn) time complexity
        
        vector<int> vec;
        int n = nums.size();
        int i=n/2 , j=n-1,end=n/2;        break in middle part
        if(n%2==0){                       if even number of element in array
            i--; end--;
        }
        while(i>=0 && j>end){             // process
            vec.push_back(nums[i--]);
            vec.push_back(nums[j--]);
        }
        while(i>=0) vec.push_back(nums[i--]);         // remain element
        while(j>end) vec.push_back(nums[j--]);
        
        for(int i=0;i<n;i++){     // copy
            nums[i] = vec[i];
        }
    }
};


---------------------------------------------------------------------

void sortInWave(int arr[], int n) 
{ 
    // Traverse all even elements 
    for (int i = 0 ; i < n ; i+=2) 
    { 
        // If current even element is smaller than previous 
        if (i>0 && arr[i-1] > arr[i] ) 
            swap(&arr[i], &arr[i-1]); 
  
        // If current even element is smaller than next 
        if (i<n-1 && arr[i] < arr[i+1] ) 
            swap(&arr[i], &arr[i + 1]); 
    } 
} 

Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() 
which should return minimum element from the SpecialStack. Your task is to complete all the functions, using stack data-Structure.

Expected Time Complexity: O(1) for all the 5 functions.
Expected Auxiliary Space: O(1) for all the 5 functions.

1st method :---------------------------------------------------------

Push(x) : Inserts x at the top of stack.
          If stack is empty, insert x into the stack and make minEle equal to x.
          If stack is not empty, compare x with minEle. Two cases arise:
          If x is greater than or equal to minEle, simply insert x.
          If x is less than minEle, insert (2*x – minEle) into the stack and make minEle equal to x. For example, let previous minEle was 3. 
          Now we want to insert 2. We update minEle as 2 and insert 2*2 – 3 = 1 into the stack.
          
Pop() : Removes an element from top of stack.
        Remove element from top. Let the removed element be y. Two cases arise:
        If y is greater than or equal to minEle, the minimum element in the stack is still minEle.
        If y is less than minEle, the minimum element now becomes (2*minEle – y), so update (minEle = 2*minEle – y).
        This is where we retrieve previous minimum from current minimum and its value in stack. For example, let the element to be removed be 1 and minEle be 2. 
        We remove 1 and update minEle as 2*2 – 1 = 3.
        
        
        
        
struct MyStack 
{ 
    stack<int> s; 
    int minEle; 
  
                                                                                     // Prints minimum element of MyStack 
    void getMin() 
    { 
        if (s.empty()) 
            cout << "Stack is empty\n"; 
  
                                                                                         // variable minEle stores the minimum element in the stack. 
        else{
            cout <<"Minimum Element in the stack is: " << minEle << "\n"; 
        }
    } 
  
                                                                                    // Prints top element of MyStack 
    void peek() 
    { 
        if (s.empty()) 
        { 
            cout << "Stack is empty "; 
            return; 
        } 
  
        int t = s.top();                                          // Top element. 
  
        cout << "Top Most Element is: "; 
  
       if(t < minEle){                                  // If t < minEle means minEle stores   value of t. 
          cout<<minEle;
       }else{
          cout<<t;
       }
    } 

    void pop() 
    { 
        if (s.empty()) 
        { 
            cout << "Stack is empty\n"; 
            return; 
        } 
  
        cout << "Top Most Element Removed: "; 
        int t = s.top(); 
        s.pop(); 
  
        if (t < minEle)                                       // Minimum will change as the minimum element  of the stack is being removed. 
        { 
            cout << minEle << "\n";                       // main logic behind the approach
            minEle = 2*minEle - t; 
        } 
  
        else{
            cout << t << "\n"; 
        }
        
    } 
  
    void push(int x) 
    { 
        if (s.empty())                                 // Insert new number into the stack 
        { 
            minEle = x; 
            s.push(x); 
            cout <<  "Number Inserted: " << x << "\n"; 
            return; 
        } 
        if (x < minEle)                                       // If new number is less than minEle 
        { 
            s.push(2*x - minEle); 
            minEle = x; 
        } 
  
        else{
           s.push(x); 
        }
  
        cout <<  "Number Inserted: " << x << "\n"; 
    } 
}; 



------------------------------------
2nd method


/*returns min element from stack*/
int _stack :: getMin()
{
   //Your code here
   if(s.empty()) return -1;
   return s.top();
}

/*returns poped element from stack*/
int _stack ::pop()
{
   //Your code here
   if(s.empty()) return -1;
   s.pop();
   int t = s.top();
   s.pop();
   
   if(!s.empty()) minEle = s.top();
   return t;
}

/*push element x into the stack*/
void _stack::push(int x)
{
   if(s.empty()  )  minEle = INT_MAX;
   if(x < minEle) minEle = x;
   
   s.push(x);
   s.push(minEle);
}


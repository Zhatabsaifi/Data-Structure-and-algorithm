Given a binary matrix. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:
Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.


Expected Time Complexity : O(n*m)
Expected Auixiliary Space : O(m)



int histogram(vector<int> &vec){
        int n = vec.size();
        
        int ans=0;
        stack<int> s;
        
        for(int i=0;i<n;i++){
            if(s.empty() || vec[s.top()] <= vec[i]){
                s.push(i);
            }
            else{
                while(!s.empty() && vec[s.top()] > vec[i]){
                    int pt = s.top();
                    s.pop();
                    
                    int ma = vec[pt] * (s.empty() ?i : i-s.top()-1);        // main logic
                    
                    ans = max(ans,ma);
                }
                s.push(i);
            }
        }
        while(!s.empty()){
            int pt = s.top(); 
            s.pop();
            
            int ma = vec[pt] * (s.empty() ? n : n-s.top()-1);
            ans = max(ans,ma);
        }
        return ans;
    }

int maxArea(int M[MAX][MAX], int n, int m) {
    vector<vector<int> > dp(n,vector<int> (m,0));
    
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dp[i][j] = (M[i][j]);
            }
        }
        
        int ans = histogram(dp[0]);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
            
                if(dp[i][j]==1){
                    dp[i][j] += dp[i-1][j];
                }
                
            }
            ans = max(ans,histogram(dp[i]));
        }
        
        return ans;
}

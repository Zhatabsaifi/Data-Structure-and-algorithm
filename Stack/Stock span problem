The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the span of stock’s price for all n days. 
The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the 
current day is less than or equal to its price on the given day.

For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}.

Example 1:
Input: 
N = 7, price[] = [100 80 60 70 60 75 85]
Output:
1 1 1 2 1 4 6
Explanation:
Traversing the given input span for 100 will 
be 1,80 is smaller than 100 so the span is 1 , 
60 is smaller than 80 so the span is 1 , 
70 is greater than 60 so the span is 2 and so on. 
Hence the output will be 1 1 1 2 1 4 6.

Example 2:
Input: 
N = 6, price[] = [10 4 5 90 120 80]
Output:
1 1 2 4 5 1
Explanation:
Traversing the given input span for 10 will be 1, 
4 is smaller than 10 so the span will be 1 , 
5 is greater than 4 so the span will be 2 and so on. 
Hence, the output will be 1 1 2 4 5 1.


1) method

time - O(n*n)

vector<int> calculateSpan(int price[], int n)  
{   
    vector<int> ans(n,1);                   // 1 for itself
    ans[0] = 1;                                  // for 0 index 
  
    for (int i = 1; i < n; i++)                         // Calculate span value of remaining days   by linearly checking previous days  
    {  
        ans[i] = 1;
  
        for (int j = i - 1; (j >= 0) &&  ( price[i] >= price[j] ); j--) {         // Traverse left while the next element    on left is smaller than price[i]   
            ans[i]++; 
        }
    }  
}  


2) method
time - O(n)
space - O(n)

vector<int> calculateSpan(int price[], int n) 
{ 
    vector<int> ans(n , 1);
    
    stack<int> st; 
    st.push(0);
    
    ans[0] = 1; 
  
    for (int i = 1; i < n; i++) { 
                                                                           // Pop elements from stack while stack is not  empty and top of stack is smaller than  price[i] 
        while (!st.empty() && price[st.top()] <= price[i]){ 
            st.pop(); 
        }
  
                                                // If stack becomes empty, then price[i] is  greater than all elements on left of it, i.e., price[0], price[1], ..price[i-1]. 
                                                 //  Else  price[i] is greater than elements after  top of stack 
                                                 
        ans[i] = (st.empty()) ? (i + 1) : (i - st.top());         // main logic like histogram
 
        st.push(i); 
    } 
    return ans
} 


3) method

time - O(n)
space - O(n)

void calculateSpan(int A[], int n, int ans[]) 
{ 
    // Span value of first element is always 1 
    ans[0] = 1; 
  
    // Calculate span values for rest of the elements 
    for (int i = 1; i < n; i++) { 
        int counter = 1; 
        while ((i - counter) >= 0 && A[i] >= A[i - counter]) {      // move behind and count the numbe rof element from arr[i-counter] is less than the arr[i] 
            counter += ans[i - counter]; 
        } 
        ans[i] = counter; 
    } 
} 

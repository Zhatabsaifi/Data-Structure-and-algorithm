Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4]

Example 1:
Input: s = "3[a]2[bc]"
Output: "aaabcbc"

Example 2:
Input: s = "3[a2[c]]"
Output: "accaccacc"

Example 3:
Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"

Example 4:
Input: s = "abc3[cd]xyz"
Output: "abccdcdcdxyz"



class Solution {
public:
    string decodeString(string s) {
        stack<string> st;
        
        int n =s.length();
        
        string alp = "" , num="";
        
        for(int i=0;i<n;i++){
            if(s[i] == ']'){                              // when the bracket is close
                if(alp.size()>0) {
                    st.push(alp); 
                    alp="";
                }  
                
                string repeat="";
                while(!st.empty() && st.top() != "["){                        // string in bracket i.e [---]
                    repeat = st.top()+repeat;
                    st.pop();
                }
                st.pop();
                
                if(st.empty()) continue;                     // if stack is empty
                
                string number_of_time = st.top();                        // number of time repeatation
                st.pop();
                
                int ti = stoi(number_of_time);                           // convert string to int
                
                string str="";
                for(int i=0;i<ti ;i++){                                   // repeat
                     str += repeat;
                }
                st.push(str);                                             // add in stack
                
            }else if(s[i] >= '0' && s[i] <= '9'){
                
                if(alp.size() >0){                                    // like  ab3[c]
                    st.push(alp);
                    alp = "";
                }
                num += s[i];
                
            }else if(s[i]== '['){
                
                st.push(num);    
                st.push(string (1,s[i]));
                
                num = "";                                // reset the value for next 
                alp="";
                
            }else{
                alp += s[i];
                
            }
        }
        if(alp.size() >0){                     // last alphabate  like   3[a]bc
             st.push(alp); 
        }
        
        
        string ans="";
        while(!st.empty()){
            ans = st.top() + ans;
            st.pop();
        }
        
        return ans;
    }
};

Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
You may assume the given string consists of lowercase English letters only and its length will not exceed 10000. 

Example 1:
Input: "abab"
Output: True
Explanation: It's the substring "ab" twice.

Example 2:
Input: "aba"
Output: False

time - O(n)
space - O(n)

class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int n =s.length();
        vector<int> pi(n,0);
        
        for(int i=1;i<n;i++){           // prefix algorihtm or Z algorithm
            int j =pi[i-1];
            
            while(j>0 && s[i] != s[j]) {
                j=pi[j-1];
            }
            if(s[i]==s[j]){
                j++;
            }
            pi[i]=j;
        }
         int len=pi[n-1];
        
        if(n%(n-len)==0 && len>0){                              // main logic
            cout<<n-len<<endl;      // length of repeat substring
            return true;
        }
        return false;
    }
};


for repeated substring pi array look like 
1) "abababababab"  -- 0 0 1 2 3 4 5 6 7 8 9 10 
2) "abcdabcdabcd" -- 0 0 0 0 1 2 3 4 5 6 7 8       
     number of zero is the length of substring 
     
Non- repeat subarray pi array
1) 
"abcdabedabcd" -- 0 0 0 0 1 2 0 0 1 2 3 4 

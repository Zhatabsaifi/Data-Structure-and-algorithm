Given a AVL tree and N values to be deleted from the tree. Write a function to delete a given value from the tree.

Example 1:

Tree = 
        4
      /   \
     2     6
    / \   / \  
   1   3 5   7

N = 4
Values to be deleted = {4,1,3,6}

Input: Value to be deleted = 4
Output:
        5    
      /   \
     2     6
    / \     \  
   1   3     7

Input: Value to be deleted = 1
Output:
        5    
      /   \
     2     6
      \     \  
       3     7

Input: Value to be deleted = 3
Output:
        5    
      /   \
     2     6
            \  
             7

Input: Value to be deleted = 6
Output:
        5    
      /   \
     2     7




Node* minValueNode(Node* node){
   Node* current = node;  
  
    while (current->left != NULL)  
        current = current->left;  
  
    return current;  
}
int height(Node * root){
    if(!root) return 0;
    return root->height;
}
int getBalance(Node* root){
    if(root == NULL) return 0;
    return height(root->left) -  height(root->right);
}
Node* rightRotate(Node* y){
    Node* x = y->left;
    Node* t =x->right;
    
    x->right = y;
    y->left = t;
    
    y->height = 1 + max( height(y->left ) , height(y->right));
    x->height = 1 + max( height(x->left ) , height(x->right));
    return x;
}

Node* leftRotate(Node* x){
    Node* y = x->right;
    Node* t  = y->left;
    
    y->left = x;
    x->right = t;
    
    x->height = 1 + max( height(x->left ) , height(x->right));
      y->height = 1 + max( height(y->left ) , height(y->right));
      
      return y;
}
Node* deleteNode(Node* root, int key)
{ 
    if (root == NULL)  
        return root;  
  
    if ( key < root->data )  
        root->left = deleteNode(root->left, key);  
    else if( key > root->data )  
        root->right = deleteNode(root->right, key);  
    else{  
        if( (root->left == NULL) || (root->right == NULL) )  {  
            
            Node *temp = root->left ?  root->left :  root->right;  
  
            // No child case  
            if (temp == NULL)  {  
                temp = root;  
                root = NULL;  
            }  
            else  
            *root = *temp; 
            
            free(temp);  
        }  
        else{  
           Node* temp = minValueNode(root->right);  
   
            root->data = temp->data;  
            root->right = deleteNode(root->right,   temp->data);  
        }  
    }  
  
    if (root == NULL)  
    return root;  
   
    root->height = 1 + max(height(root->left), height(root->right));  
 
    int balance = getBalance(root);  
  
 
    if (balance > 1 &&   getBalance(root->left) >= 0)  
        return rightRotate(root);  

    if (balance > 1 &&   getBalance(root->left) < 0)   {  
        root->left = leftRotate(root->left);  
        return rightRotate(root);  
    }  
  
   if (balance < -1 &&  getBalance(root->right) <= 0)  
        return leftRotate(root);  
  
   if (balance < -1 &&   getBalance(root->right) > 0)  {  
        root->right = rightRotate(root->right);  
        return leftRotate(root);  
    }  
  
    return root; 
}

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.

Each node of each tree in the answer must have node.val = 0.

You may return the final list of trees in any order.

Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<pair<int,int> ,vector<TreeNode*> > mp;
    
    vector<TreeNode*> rec(int st,int end){
        vector<TreeNode*> ans;
        if(st > end) return ans;        // zero node
        
        if(st == end) {         // one node
            ans.push_back(new TreeNode(0));
            return ans;
        }
        
        auto it = mp.find({st,end});          // memorization
        if(it != mp.end()) return it->second;
        
        vector<TreeNode*> left,right,res;
        
        for(int i=st;i<=end;i++){
            left = rec(st , i-1);
            right = rec(i+1,end);
            
            for(TreeNode* x1 : left){
                for(TreeNode* x2 : right){
                    TreeNode* root = new TreeNode(0);     // make unique tree
                    root->left = x1;
                    root->right  = x2;
                    
                    res.push_back(root);
                }
            }
        }
        return mp[{st,end}]=res;
    }
    vector<TreeNode*> allPossibleFBT(int n) {
       return rec(1,n);
    }
};

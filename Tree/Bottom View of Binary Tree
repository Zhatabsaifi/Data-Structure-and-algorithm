Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.
 
 
 
vector <int> bottomView(Node *root)
{
    vector<int> ans;
    if(root == NULL ) return ans;
    map<Node* , int > hori_dis;
    
    map<int,int> mp;
    queue<Node*> q;
    hori_dis[root] = 0;
    
    q.push(root);
    while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        
        int dis = hori_dis.find(temp)->second;
        mp[dis] = temp->data;
        
        if(temp->left){
            hori_dis[temp->left] = dis-1;
            q.push(temp->left);
        }
        
        if(temp->right){
            hori_dis[temp->right] = dis+1;
            q.push(temp->right);
        }
    }
    for(auto it = mp.begin() ; it != mp.end(); it++){
        ans.push_back(it->second);
    }
    return ans;
}


Given a special binary tree having random pointers along with the usual left and right pointers. Clone the given tree.

Example 1:

Input:

Output: 1
Explanation: The tree was cloned successfully.

Your Task:
No need to read input or print anything. Complete the function cloneTree() which takes root of the given tree as input parameter and returns the root of the cloned tree. 

Note: The output is 1 if the tree is cloned successfully. Otherwise output is 0.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).


1) method

this method take extra space

Node* copyLeftRightNode(Node* treeNode, unordered_map<Node *, Node *> &mymap) 
{ 
    if (treeNode == NULL){ 
        return NULL; 
     }
     
    Node* cloneNode = newNode(treeNode->key); 
    mymap[treeNode] = cloneNode; 
    cloneNode->left  = copyLeftRightNode(treeNode->left, mymap); 
    cloneNode->right = copyLeftRightNode(treeNode->right, mymap); 
    return cloneNode; 
} 
void copyRandom(Node* treeNode,  Node* cloneNode, unordered_map<Node *, Node *> &mymap) 
{ 
    if (cloneNode == NULL){ 
        return; 
     }
    cloneNode->random =  mymap[treeNode->random]; 
    
    copyRandom(treeNode->left, cloneNode->left, mymap); 
    copyRandom(treeNode->right, cloneNode->right, mymap); 
} 


Node* cloneTree(Node* tree) 
{ 
    if (tree == NULL){ 
        return NULL; 
    }
    unordered_map<Node *, Node *> mymap; 
    
    Node* newTree = copyLeftRightNode(tree, mymap); 
    
    copyRandom(tree, newTree, mymap); 
    return newTree; 
} 



2) method
no extra space use

1_ Create new nodes in cloned tree and insert each new node in original tree between the left pointer edge of corresponding node in the original tree (See the below image).
    i.e. if current node is A and it’s left child is B ( A — >> B ), then new cloned node with key A wil be created (say cA) and it will be put as A — >> cA — >> B 
    (B can be a NULL or a non-NULL left child). Right child pointer will be set correctly i.e. if for current node A, right child is C in original tree (A — >> C) 
    then corresponding cloned nodes cA and cC will like cA —- >> cC
    
2. Set random pointer in cloned tree as per original tree
  i.e. if node A’s random pointer points to node B, then in cloned tree, cA will point to cB (cA and cB are new node in cloned tree corresponding to
  node A and B in original tree)

3. Restore left pointers correctly in both original and cloned tree


Node* copyLeftRightNode(Node* treeNode) 
{ 
    if (treeNode == NULL) 
        return NULL; 
  
    Node* left = treeNode->left; 
    treeNode->left = newNode(treeNode->key); 
    treeNode->left->left = left; 
    
    if(left != NULL) {
        left->left = copyLeftRightNode(left); 
    }
  
    treeNode->left->right = copyLeftRightNode(treeNode->right); 
    
    return treeNode->left; 
} 
  
                      // This function sets random pointer in cloned tree as per original tree i.e. if node A's random pointer points to node B, then 
                      //in cloned tree, cA wil point to cB (cA and cB are new node in cloned  tree corresponding to node A and B in original tree) 
                      
void copyRandomNode(Node* treeNode, Node* cloneNode) 
{ 
    if (treeNode == NULL) 
        return; 
    if(treeNode->random != NULL) {                                      
        cloneNode->random = treeNode->random->left; 
    }
    else{
        cloneNode->random = NULL; 
    }
  
    if(treeNode->left != NULL && cloneNode->left != NULL){ 
        copyRandomNode(treeNode->left->left, cloneNode->left->left); 
        
    }
    copyRandomNode(treeNode->right, cloneNode->right); 
} 
  
                                                                        // This function will restore left pointers correctly in both original and cloned tree 
void restoreTreeLeftNode(Node* treeNode, Node* cloneNode) 
{ 
    if (treeNode == NULL){ 
        return; 
    }
    
    if (cloneNode->left != NULL)                            // change the connection
    { 
        Node* cloneLeft = cloneNode->left->left; 
        treeNode->left = treeNode->left->left; 
        cloneNode->left = cloneLeft; 
    } 
    else{
        treeNode->left = NULL; 
    }
  
    restoreTreeLeftNode(treeNode->left, cloneNode->left); 
    restoreTreeLeftNode(treeNode->right, cloneNode->right); 
} 
  
//This function makes the clone of given tree 
Node* cloneTree(Node* treeNode) 
{ 
    if (treeNode == NULL){ 
        return NULL; 
     }
     
    Node* cloneNode = copyLeftRightNode(treeNode); 
    
    copyRandomNode(treeNode, cloneNode); 
    
    restoreTreeLeftNode(treeNode, cloneNode); 
    
    return cloneNode; 
} 

after copyLeftRightNode function

      1                                                         1
     /   \                                                    /     \ 
    2     3       ===>>                                 1(clone)        3
   /  \                                                 /     \
  4    5                                               2          3(clone)
                                                    /     \
                                              2(clone)       5
                                              /       \
                                             4          5(clone)
                                            /
                                           4(clone)

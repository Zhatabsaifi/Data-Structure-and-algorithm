Consider Red lines of slope -1 passing between nodes (in following diagram). The diagonal sum in a binary tree is the sum of all nodeâ€™s data lying between these lines.
Given a Binary Tree of size N, print all diagonal sums.

For the following input tree, output should be 9, 19, 42.
9 is sum of 1, 3 and 5.
19 is sum of 2, 6, 4 and 7.
42 is sum of 9, 10, 11 and 12.


Example 1:
Input:
         4
       /   \
      1     3
           /
          3
Output: 7 4


Example 2:
Input:
           10
         /    \
        8      2
       / \    /
      3   5  2
Output: 12 15 3

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).



vector <int> diagonalSum(Node* root) {

    queue<pair<Node* ,int > > q;
    q.push({root, 0});
    
    map<int, int> mp;
    
    while(!q.empty()){
        pair<Node*, int > p = q.front();
        q.pop();
        
        mp[p.second ] += p.first->data;
        
        if(p.first -> left){
             q.push( {p.first ->left , p.second +1} );
        }
        if(p.first -> right) {
            q.push( {p.first ->right , p.second } );
        }
    }
    vector<int> vec;
    for(auto it = mp.begin() ;it != mp.end();it++){
        vec.push_back(it->second);
    }
    return vec;
}

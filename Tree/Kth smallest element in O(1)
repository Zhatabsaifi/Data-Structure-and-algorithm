Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
don't change tree structure

O(2*n) time 
O(1) space
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt=0;
        int ans=0;
        TreeNode* cur=root;
        
        while(cur){
            cout<<cur->val<<" --> ";
            
           if(cur->left == NULL){
               if(++cnt == k){
                   ans = cur->val;
               }
               cur = cur->right;
               
           }else{
               TreeNode* temp = cur->left;
               while(temp->right != NULL && temp->right != cur){
                   temp= temp->right;
               }
               
               if(temp->right == NULL){
                   temp->right = cur;
                   cur = cur->left;
               }
               else{
                   if(++cnt == k) {
                       ans = cur->val;
                     
                   }
                   cur = cur->right;
                   temp->right = NULL;
               }
           }
        }
        return ans;
    }
};

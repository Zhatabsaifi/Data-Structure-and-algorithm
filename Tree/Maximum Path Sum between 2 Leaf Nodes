Given a binary tree in which each node element contains a number. Find the maximum possible sum from one leaf node to another.


Example 1:

Input :      
           3                               
         /    \                          
       4       5                     
      /  \      
    -10   4                          

Output: 16

Explanation :
Maximum Sum lies between leaf node 4 and 5.
4 + 4 + 3 + 5 = 16.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of Tree)


int ma = INT_MIN;

int rec(Node* root){
    if(!root) return 0;
    if(!root->left && !root->right) return root->data;
    
    int left = rec(root->left);
    int right = rec(root->right);
    
    int temp = max(left,right) + root->data;
    
   if(root->left && root->right){
       ma = max(ma, left + right + root->data);
       return temp;
   }
   
   return (!root->left) ? right + root->data : left + root->data;
}

int maxPathSum(Node* root)
{ 
    // code here 
    ma = INT_MIN;
    if(root == NULL) return 0;
    rec(root);
    return ma;
}

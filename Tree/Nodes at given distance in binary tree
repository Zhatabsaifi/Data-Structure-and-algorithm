Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.

Example 1:

Input :      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14

Target Node = 8
K = 2

Output: 10 14 22

Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.



Example 2:

Input :      
         20
       /    \
      7      24
    /   \
   4     3
        /  
       1    

Target Node = 7
K = 2

Output: 1 24




class solver
{
public:
    vector<int> ans;
    void dfs(Node* root, int k,int lev){
        if(!root) return ;
        if(lev == k){
            ans.push_back(root->data);
            return ;
        }
       // cout<<root->data<<" @@ "<<endl;
        dfs(root->left,k,lev+1);
        dfs(root->right,k,lev+1);
    }
    int rec(Node* root ,int tar,int k ){
        if(!root ) return -1;
        if(root->data == tar){
            dfs(root,k,0);
            return 1;
        }
        
        int left = rec(root->left,tar,k);
        if(left != -1){
            if(left == k) ans.push_back(root->data);
            //cout<<left<<" # "<<root->data<<endl;
            dfs(root->right,k,left+1);
            return left+1;
        }
        int rig= rec(root->right, tar,k);
        if(rig != -1){
            if(rig == k) ans.push_back(root->data);
            //cout<<rig<<"-->"<<root->data<<endl;
            dfs(root->left, k,rig+1);
            return rig+1;
        }
        return -1;
    }
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        ans.clear();
        rec(root,target,k);
        sort(ans.begin(),ans.end());
        return ans;
    }
};

Given a binary tree and data value of two of its nodes. Find the number of turns needed to reach from one node to another in the given binary tree.

Example 1:

Input :      
Tree = 
           1
        /    \
       2       3
     /  \     /  \
    4    5   6    7                        
   /        / \                        
  8        9   10   

first node = 5
second node = 10

Output: 4

Explanation : 
Turns will be at 2, 1, 3, 6.




Node* LCA(Node* root,int a,int b){
    if(root==NULL) return NULL;
    if(root->data == a|| root->data == b) return root;
    
    Node* left = LCA(root->left , a,b);
    Node* right = LCA(root->right ,a,b);
    
    if(left != NULL && right != NULL){
         return root;
    }
    
    return (left != NULL) ? left: right;
}
bool count(Node* root, int val,bool turn ,int &cnt){
    if(root == NULL){
         return root;
    }
    
    if(root->data == val){
         return true;
    }
    
    if(turn){
        if(count(root->left , val, turn , cnt)){
             return true;
        }
        if(count(root->right , val ,!turn , cnt)){
            cnt++;
            return true;
        }
    }else{
        if(count(root->right , val , turn ,cnt)){
             return true;
        }
        
        if( count(root->left , val  ,!turn ,cnt) ){
            cnt++;
            return true;
        }
    }
    return false;
} 
int NumberOFTurns(struct Node* root, int a, int b)
{
  // Your code goes here
  Node*lca = LCA(root,a,b);
  if(lca == NULL){
       return -1;
  }
    int cnt=0;
    
    // case 1:
    if(lca->data != a){
          if(count(lca->left , a,true,cnt) || count(lca->right , a,false,cnt));
    }
    if(lca ->data != b){
        if(count(lca->left , b, true,cnt) || count(lca->right , b, false,cnt));
    }
    if(lca->data != a && lca->data != b) {
        cnt++;
    }
    return cnt;
}

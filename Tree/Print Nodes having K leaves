Given a binary tree and a integer value K, the task is to find all nodes data in given binary tree having exactly K leaves in sub-tree rooted with them.

NOTE: Nodes should be printed in the order in which they appear in postorder traversal.

Example 1:

Input:
K = 1
      0
    /   \
   1     2
Output: -1
Explanation: There is no node in this
tree which has one leaf in the sub tree
below it.
Example 2:

Input:
K = 2
          0
        /   \
       1     2
           /  
          4
        /   \
       5     9
Output: 4 2
Explanation: Nodes with data 2 and 4, have
2 leaves in the subtree below it.

Note: If no node is found the list returned should contain only one value -1.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(Height of the Tree).


int cnt=0;
int rec(Node* root,int &k ){
    if(root == NULL) return 0;
    
    if(!root->left && !root->right){
         return 1;
    }
    
    int left = rec(root->left , k);
    int right = rec(root->right , k);
    
   if(left + right == k){
       cnt++;
       cout<<root->data<<" ";
   }
   return left+right;
}
void btWithKleaves(Node *ptr, int k)
{ 
    //your code here.
    cnt=0;
    rec(ptr,k);
    if(cnt==0) cout<<-1;
    cout<<endl;
}
